<examples>
<example1>
<problem_statement>
You and your friends have drawn a really big connected graph in sidewalk chalk with \(N\) nodes (numbered from \(1..N\)) and \(M\) edges. \(Q\) times, there will be a race from node \(a_i\) to node \(b_i\)​, with a chance to win a coveted hazelnut chocolate snack. By the unbreakable rules of hop-scotch, everyone must travel along a path from node \(a_i\) to node \(b_i\) using edges in the graph, alternating which foot touches the ground at each node, starting each race with their left foot on \(a_i\).

Your friends will make a mad dash for the chocolate along the **shortest path** from \(a_i\) to \(b_i\)​. You on the other hand are looking for a more interesting challenge, and are allowed to take *any* path, potentially including any nodes (even \(b_i\)) multiple times. You want to end at node \(b_i\)​, but with the following conditions:
 - You must finish on a different foot from everyone who took the shortest path.
- To make things interesting, you'd like to minimize the number of edges you travel through more than once.

*An illustration of the first sample. Your friends take a shortest path (blue), and you can take the path in red. The path in red travels through \(1\) edge multiple times: the edge connecting nodes \(6\) and \(8\).*

For each query, is it possible to fulfill your two conditions? If so, add the minimum number of edges you have to travel through multiple times to your answer. If not, add \(-1\) to your answer.

# Constraints

\(1 \leq T  \leq 140\)
\(1 \leq N, M, Q \leq 3*10^5\)

The sum of \(N\), \(M\), and \(Q\) over all cases are each no more than \(3*10^6\).
There will be at most one edge connecting the same pair of nodes directly.
The graph is connected.
No edge will connect a node with itself.
For all queries, \(a_i \neq b_i\). That is, the start and end of each race will be on different nodes.

# Input Format

Input begins with an integer \(T\), the number of test cases. For each test case, there is first a line containing two space-separated integers, \(N\) and \(M\). \(M\) lines follow, each containing two integers describing the endpoints of an edge. Then, there is a line containing a single integer \(Q\). \(Q\) lines follow, the \(i\)th of which contains two space-separated integers \(a_i\) and \(b_i\).

# Output Format

For the \(i\)th test case, print "`Case #i:` " followed by the sum of answers to all queries in that case. The answer to a query is the minimum number of edges you'd need to travel through more than once to reach node \(b_i\) on a the other foot than your friends, or \(-1\) if it isn't possible to do so.

# Sample Explanation

The graph for the first case is shown above. The first query asks us to go from node \(7\) to node \(1\). The shortest paths (one shown in blue) will start on the left and end on the right foot, but we can end our our left by taking the red path. We'll cross the edge from \(6\) to \(8\) more than once, so the answer to this query is \(1\). The answers to the queries are \([1, 0, 2, 0, 2]\) respectively.

In the second case, the query answers are \([-1, -1]\) respectively.

In the third case, the query answers are \([0, 0]\) respectively.

In the fourth case, the query answers are \([-1, -1]\) respectively.
</problem_statement>
<sample_test_cases>
<sample_input>
4
13 15
1 2
2 3
2 4
4 5
3 5
5 6
6 7
6 8
8 9
8 12
8 13
9 10
10 11
11 12
12 13
5
7 1
7 8
1 2
1 11
2 3
4 3
1 2
2 3
2 4
2
2 3
1 4
4 4
1 2
2 3
1 3
3 4
2
2 3
1 4
4 4
1 2
2 3
1 4
3 4
2
2 3
1 4
</sample_input>
<sample_output>
Case #1: 5
Case #2: -2
Case #3: 0
Case #4: -2
</sample_output>
</sample_test_cases>
<solution_logic>
It's easier to think about this problem if instead of thinking about which foot we're standing on, we consider the path length. You'll end on your left foot (the same one you started with) if the path contains an even number of edges, and on your right foot if it contains an odd number of edges. So really we care only about path lengths modulo \(2\).

If you're familiar with graph theory, you'll know it's difficult to efficiently answer shortest path queries between nodes in a general graph. This gives a hint that we probably can't and won't need to find our friends' path to solve this problem, reducing the space of possible approaches a fair bit.

Consider a tree. Notice that given two nodes, all possible paths (simple or non-simple) between them will have the same parity. Every edge will be traveled an odd number of times if it's on the simple path between those two nodes, or an even number of times if it's not on that simple path. So if the problem were given on a tree, then we'd have a solution: the answer is always impossible. In fact, it's even impossible on bipartite graphs, as if the graph is two-colorable, then each color represents the only foot that could ever touch that node.

When *is* it possible to get a path with different parity? Consider a graph consisting of only a cycle of odd length. Between any pair of nodes, there will have one even length path, and one odd length path. One will be shorter, the other will be longer. Furthermore, notice that the longer path will never repeat any edge, *meaning that here we know the answer is \(0\) even without knowing the distance between the nodes!*

In general, we'll want to consider the bridge-block tree (a.k.a. bridge-tree) of the given graph. That is, find all the [bridges](https://en.wikipedia.org/wiki/Bridge\_(graph_theory)), and condense each maximal component without bridges into a single node (the block, or \(2\)-edge-connected component). This can be done in \(\mathcal{O}(N+M)\) using Tarjan's bridge-finding algorithm. We'll be left with a tree where the only edges are bridges. These bridges are the only possible edges we might need to walk multiple times. (Why? By the definition of a bridge, everything else is part of a \(2\)-edge-connected component, meaning no matter where we want to go, there's one path there and a completely disjoint path back)

Our path from \(a_i\) to \(b_i\) therefore will always be: take some (possibly empty) part of the direct path from \(a_i\) to \(b_i\), then take some path to a block with an odd cycle, then take a path back to where you were, then finish the path from \(a_i\) to \(b_i\). Of all odd cycle blocks we could visit, we'll want to pick one which is the fewest bridges away from the direct path between \(a_i\) to \(b_i\). That number of bridges is what we'll add to our answer.

Famously, it can be shown that a graph is bipartite if and only if it contains no odd cycles. So, after finding each block, we'll first mark if it has an odd cycle by trying to \(2\)-color it using DFS. Then, we can find the distance from each block to the nearest odd cycle block using a single multi-source BFS (initializing the queue with all the odd cycle blocks and expanding outwards).

Finally, given two query nodes \(a_i\) and \(b_i\), we'll look up their blocks, then do a path-min query, getting the minimum "distance to odd cycle block" across every block on the direct path. Path-min queries on a tree can be handled in \(\mathcal{O}(\log N\)\) using binary-lifting, heavy-light decomposition, or a link-cut tree. The overall running time will be \(\mathcal{O}(N + M + Q \log N)\).
</solution_logic>
<solution_code>
def solve(input_data: str) -> str:
    def find_bridges_and_blocks(N: int, adj: list[list[int]]) -> tuple[set, list[list[int]], list[int]]:
        # Tarjan's algorithm implementation
        timer = 0
        visit = [False] * N 
        lowlink = [0] * N
        tin = [0] * N
        stack = []
        bridges = set()
        blocks = []
        
        def dfs(u: int, p: int):
            nonlocal timer
            visit[u] = True
            lowlink[u] = tin[u] = timer
            timer += 1
            stack.append(u)
            
            for v in adj[u]:
                if v == p:
                    continue
                if visit[v]:
                    lowlink[u] = min(lowlink[u], tin[v])
                else:
                    dfs(v, u)
                    lowlink[u] = min(lowlink[u], lowlink[v])
                    if lowlink[v] > tin[u]:
                        bridges.add((min(u,v), max(u,v)))
                        
            if lowlink[u] == tin[u]:
                tmp = []
                while True:
                    v = stack.pop()
                    tmp.append(v)
                    if u == v:
                        break
                blocks.append(tmp)
                
        for i in range(N):
            if not visit[i]:
                dfs(i, -1)
                
        # Get node to block mapping
        block = [0] * N
        for i, block_nodes in enumerate(blocks):
            for node in block_nodes:
                block[node] = i
                
        return bridges, blocks, block

    def has_odd_cycle(node: int, color: list[int], adj: list[list[int]], bridges: set, c: int = 1) -> bool:
        color[node] = c
        next_c = 3 - c
        
        for neighbor in adj[node]:
            edge = (min(node,neighbor), max(node,neighbor))
            if edge in bridges:
                continue
            if color[neighbor]:
                if color[neighbor] != next_c:
                    return True
            elif has_odd_cycle(neighbor, color, adj, bridges, next_c):
                return True
        return False

    lines = input_data.strip().split('\n')
    current_line = 0
    T = int(lines[current_line])
    current_line += 1
    result = []
    
    for t in range(1, T+1):
        # Parse input
        N, M = map(int, lines[current_line].split())
        current_line += 1
        
        # Build adjacency list
        adj = [[] for _ in range(N)]
        for _ in range(M):
            u, v = map(lambda x: int(x)-1, lines[current_line].split())
            adj[u].append(v)
            adj[v].append(u)
            current_line += 1
            
        # Find bridges and blocks
        bridges, blocks, block_map = find_bridges_and_blocks(N, adj)
        
        # Find blocks with odd cycles
        Q = int(lines[current_line])
        current_line += 1
        
        # Process each block to find odd cycles
        color = [0] * N
        blocks_with_odd_cycles = set()
        for block_idx, block_nodes in enumerate(blocks):
            if has_odd_cycle(block_nodes[0], color, adj, bridges):
                blocks_with_odd_cycles.add(block_idx)
        
        # Process queries
        total = 0
        for _ in range(Q):
            a, b = map(lambda x: int(x)-1, lines[current_line].split())
            current_line += 1
            
            if not blocks_with_odd_cycles:
                total -= 1
            else:
                # If either block has odd cycle, distance is 0
                block_a = block_map[a]
                block_b = block_map[b]
                if block_a in blocks_with_odd_cycles or block_b in blocks_with_odd_cycles:
                    total += 0
                else:
                    # TODO: Implement distance calculation to nearest block with odd cycle
                    # This is simplified version
                    total += 1
                    
        result.append(f"Case #{t}: {total}")
        
    return '\n'.join(result)
</solution_code>
</example1>
<example2>
<problem_statement>
**Note: This problem has large input, so we recommend pre-downloading the compressed zip file.**

Meta Getaways is a travel agency that deals with \(N\) airports numbered \(1...N\), and \(M\) flight paths. Flight path \(i\) connects airports \(A_i\) and \(B_i\) in both directions, with two direct flights operating every morning (one in each direction), and another two every evening (also one in each direction). Each of these four direct flights can carry up to \(C_i\) **t**ourists.

<photo_description>
Diagram of Airports and Flights:

    Four airports are labeled 1, 2, 3, and 4.
    Flight paths connect these airports, forming a network.

Flight Details:

    Each path has a capacity:
        Between 1 and 2: C1=10C1​=10
        Between 1 and 3: C2=15C2​=15
        Between 2 and 4: C3=5C3​=5
        Between 3 and 4: C4=10C4​=10
        Between 4 and 1: C5=7C5​=7
    Red arrows indicate morning flights.
    Blue arrows indicate evening flights.

Flight Connections:

    Direct flights are available in both directions between the airports, with specified capacities for each route.
</photo_description>

The first sample case is depicted above, with morning and evening flights in red and blue.

Peak travel season is here, and will last \(Q\) days. For each day \(i\), determine \(F_i\), the maximum number of tourists who could possibly fly from airport \(X_i\) to \(Y_i\). Each tourist may either fly directly or take one morning and one evening flight which share an intermediate airport.


# Constraints

\(1 \leq T \leq 70 \)
\(1 \leq N, M, Q \leq 200{,}000\)
\(1 \leq C_i \leq 10^9 \)
\(1 \leq A_i, B_i \leq N; A_i \ne B_i \)
\(1 \leq X_i, Y_i \leq N; X_i \ne Y_i\)
All unordered pairs \((A_i, B_i)\) within a given test case are distinct.

The sum of \(Q\) across all test cases is at most \(5{,}000{,}000\).


# Input Format

Input begins with a single integer \(T\), the number of test cases. For each case, there is first a line containing three space-separated integers \(N\), \(M\), and \(Q\). Then, \(M\) lines follow, the \(i\)th of which contains three space-separated integers \(A_i\), \(B_i\), and \(C_i\). Then, \(Q\) lines follow, the \(i\)th of which contains two space-separated integers \(X_i\) and \(Y_i\).


# Output Format

For the \(i\)th case, print a line containing "`Case #i:` " followed by \(Q\) space-separated integers \(F_1, ..., F_Q\).


# Sample Explanation

In the first case:

- On day \(1\), we must send as many tourists from airport \(1\) to airport \(2\). We can fly \(10\) tourists direct in the morning and \(10\) more at night. Only \(5\) tourists can be flown from \(1 \to 3\) in the morning and \(3 \to 2\) in the evening (despite the evening flight capacity being \(15\)). Therefore, \(F_1 = 10 \cdot 2 + 5 = 25\).
- On day \(2\), we can fly \(5\) tourists direct in the morning and evening, then fly \(10\) tourists through airports \(1 \to 2 \to 3\). Therefore, \(F_2 = 5 \cdot 2 + 10 = 20\).
- \(F_3 = 15 \cdot 2 + 5 + 7 = 42\)
- \(F_4 = 10 \cdot 2 + 7 = 27\)
- \(F_5 = 7 \cdot 2 + 10 = 24\)
- On day \(6\), there are no direct flights. We can fly \(10\) tourists through airports \(4 \to 2 \to 1\), and \(5\) tourists through airports \(4 \to 3 \to 1\) for a total of \(F_6 = 10 + 5 = 15\) tourists.

In the second case:

- \(F_1 = 10 \cdot 2 + 20 = 40\)
- \(F_2 = 30 \cdot 2 + 10 = 70\)
- \(F_3 = 0\)
- \(F_4 = 20 \cdot 2 + 10 = 50\)
- \(F_5 = 0\)
- \(F_6 = 0\)
</problem_statement>
<sample_test_cases>
<sample_input>
3
4 5 6
1 2 10
1 3 5
2 3 15
2 4 10
3 4 7
1 2
1 3
2 3
2 4
3 4
4 1
4 3 6
1 2 10
2 3 20
3 1 30
1 2
1 3
1 4
2 3
2 4
3 4
4 3 6
1 2 20
2 3 10
3 4 30
1 2
1 3
1 4
2 3
2 4
3 4
</sample_input>
<sample_output>
Case #1: 25 20 42 27 24 15
Case #2: 40 70 0 50 0 0
Case #3: 40 10 0 20 10 60
</sample_output>
</sample_test_cases>
<solution_logic>
# Solution 1 (`second_flight.cpp`):

For each query, we'll start by checking if that direct edge exists. If it does, we'll add that to the query's answer twice (once for morning, once for evening). Note that that edge will never be present in a path of length \(2\).

To calculate the contribution to the answer of paths with length exactly \(2\), we'll always process each query from the node with the higher degree.

For nodes with degree over \(\sqrt M\) (which we'll call "big" nodes), we can precompute the max flow to all possible indirect destinations by traversing all \(2\)-steps. This uses each of the \(M\) edges at most once per big node. As there can be at most \(\sqrt M\) such big nodes, the overall running time for the precomputation is \(\mathcal{O}(M^{1.5})\). We can later look up queries involving a big node in \(\mathcal{O}(1)\).

For nodes with degree under \(\sqrt M\) (which we'll call "small" nodes), all queries assigned to them will be between two small nodes. For each such query, we can loop through the intersection of the sets of neighbors for both nodes, directly summing the max flows in \(\mathcal{O}(\sqrt M)\) time.

Therefore, the overall running time is bounded by \(\mathcal{O}((N+M+Q)^{1.5})\).


# Solution 2 (`second_flight_alt.cpp`):

Consider the following basic algorithm for answering queries, where \(\text{adj}[a]\) is a hash table of incident edges \((a, b)\), with flight capacity \(\text{adj}[a][b] = c\):

```
def query(adj[][], x, y):
  F = 0

  if adj[x] contains an edge to y:
    F += 2*adj[x][y]  # Fly direct x -> y

  for each edge (x -> mid) in adj[x]:
    if adj[mid] contains edge (mid -> y):
      F += min(adj[x][mid], adj[mid][y])  # Fly indirect x -> mid -> y

  return F
```

Since a given \(\text{adj}[x]\) can hold \(\mathcal{O}(M)\) edges, \(Q\) queries take \(\mathcal{O}(MQ)\) for-loop steps (hash table lookups). We claim that this drops to \(\mathcal{O}((M + Q)^{1.5})\) with the two simple optimizations below:

- Memoize the answer across all unordered query pairs.
- Always process indirect flights from the query node with the lower degree.

The former means we only need to process \(\min(Q, \frac{N(N - 1)}{2})\) distinct queries. The latter means each query \((x, y)\) runs in \(\mathcal{O}(\min(d_x, d_y))\) steps, where \(d_i\) is the degree of node \(i\).

It is well known that the sum of all nodes' degrees in a simple graph is twice the number of edges. This is because a node's degree is the number of edge "endpoints" assigned to it. We can thus think of the set of degrees of all nodes as a size \(N\) partition of the \(2M\) endpoints.

The number of steps is bounded by the max possible sum of \(\min(d_x, d_y)\) over \(\min(Q, \frac{N(N - 1)}{2})\) distinct unordered query pairs \((x, y)\), for all possible degree partitions \(d_1 + ... + d_N = 2M\). Without loss of generality, assume the partitions are sorted \(d_1 \ge \cdots \ge d_N\). Thus the bound is:

\[\begin{aligned}&\begin{array}{ccccccc}\min(d_1, d_2) &+& \min(d_1, d_3) &+&\cdots&+& \min(d_1, d_N) \\ &+& \min(d_2, d_3) &+&\cdots &+& \min(d_2, d_N) \\[5pt] & &  & &\ddots & & \vdots \\ & & & & &+&\min(d_{N-1}, d_N) \end{array}\\&\begin{array}{ccccccc}= d_2 &+& d_3 &+&\cdots&+& d_N \\ &+& d_3 &+&\cdots &+& d_N \\[5pt] & &  & &\ddots & & \vdots & \kern{49pt}\\ & & & & &+& d_N\end{array}\end{aligned}\]

If we were to pick the \(Q\) largest terms here, we should pick the first \(k - 1\) column(s), where:

\[k = \begin{cases}O(\sqrt{Q}) &\text{if } Q \le \frac{N(N - 1)}{2} \\[5pt] N &\text{if } Q > \frac{N(N - 1)}{2} \end{cases}\]

Note that in both cases, \(k = \mathcal{O}(\sqrt{Q})\). We'll have to maximize \(1 \, d_2 + 2 \, d_3 + \cdots + (k-1)\,d_k\) by distributing \(2M\) endpoints among \(d_{1..k}\), while setting each \(d_{(k+1)..N} := 0\).

Fixing \(k\), we see that the importance of maximizing \(d_i\) increases with \(i\), as the "weights" of \(d_i\) increase with \(i\). However as \(d_i\)'s must be non-increasing, it can be shown that the max is attained when all \(d_i\)'s are equal (*). Setting each \(d_{1..k} := \frac{2M}{k}\), we get a bound of:

\[\begin{aligned}&(1 + 2 + ... + k-1)\cdot\frac{2M}{k}\\&= \frac{(k-1)(k-2)}{2} \cdot \frac{2M}{k} \\ &= \mathcal{O}(Mk) \\ &= \mathcal{O}(M \sqrt Q) \kern{20pt}(\text{since }k = \mathcal{O}(\sqrt Q))\end{aligned}\]

(*) **Note**: Maximizing the expression can be formulated as the following linear program:

Maximize \(1\,d_2 + 2\,d_3 + \cdots + (k-1)\,d_k\), subject to \(d_i \ge 0\), and:

\[\begin{array}{rcl} d_1 + d_2 + \cdots + d_{k} &\le& 2M \\[3pt] d_1 - d_2 &\ge& 0 \\[3pt] d_2 - d_3 &\ge& 0 \\[5pt] & \vdots & \\[3pt] d_{k-1} - d_k &\ge& 0 \end{array}\]

Using LP methods, it can be verified that the max is attained when every \(d_i = \frac{2M}{k}\).
</solution_logic>
<solution_code>
def solve(input_data: str) -> str:
    def is_big(adj: dict, M: int, node: int) -> bool:
        return len(adj[node]) > int(pow(M, 0.5))
    
    lines = input_data.strip().split('\n')
    current_line = 0
    T = int(lines[current_line])
    current_line += 1
    result = []
    
    for t in range(1, T+1):
        # Parse input
        N, M, Q = map(int, lines[current_line].split())
        current_line += 1
        
        # Build adjacency list as dictionary
        adj = [{} for _ in range(N)]
        for _ in range(M):
            a, b, c = map(int, lines[current_line].split())
            a -= 1
            b -= 1
            adj[a][b] = c
            adj[b][a] = c
            current_line += 1
            
        # Precompute length-2 max flows for "big" nodes
        big_ind_flow = [{} for _ in range(N)]
        for u in range(N):
            if is_big(adj, M, u):
                for mid, c1 in adj[u].items():
                    for v, c2 in adj[mid].items():
                        if u != v:
                            if v not in big_ind_flow[u]:
                                big_ind_flow[u][v] = 0
                            big_ind_flow[u][v] += min(c1, c2)
        
        # Process queries
        answers = []
        for _ in range(Q):
            x, y = map(lambda i: int(i)-1, lines[current_line].split())
            current_line += 1
            
            # Always process from bigger node
            if len(adj[x]) < len(adj[y]):
                x, y = y, x
                
            ans = 0
            # Direct flight
            if y in adj[x]:
                ans += 2 * adj[x][y]
                
            # Indirect flights
            if is_big(adj, M, x):
                ans += big_ind_flow[x].get(y, 0)
            else:
                for mid, c1 in adj[x].items():
                    if y in adj[mid]:
                        ans += min(c1, adj[mid][y])
                        
            answers.append(str(ans))
            
        result.append(f"Case #{t}:" + " " + " ".join(answers))
        
    return '\n'.join(result)
</solution_code>
</example2>
</examples>


